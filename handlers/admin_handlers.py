### –§–∞–π–ª: handlers/admin_handlers.py
# -*- coding: utf-8 -*-
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
import database as db
from shared import admin_only, DEFAULT_MODEL, _

# <<< –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π >>>
def create_user_selection_keyboard(page: int = 0, users_per_page: int = 5) -> InlineKeyboardMarkup:
    """Creates a paginated keyboard of users for selection."""
    all_users = db.get_all_users_with_activity()
    
    start_index = page * users_per_page
    end_index = start_index + users_per_page
    
    users_on_page = all_users[start_index:end_index]
    
    keyboard = []
    for user in users_on_page:
        name = user['first_name'] or "No Name"
        username = f"(@{user['username']})" if user['username'] else ""
        button_text = f"{name} {username}".strip()
        # callback_data –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"userinfo_{user['chat_id']}")])
        
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"userinfo_page_{page - 1}"))
    if end_index < len(all_users):
        nav_buttons.append(InlineKeyboardButton("–î–∞–ª–µ–µ >>", callback_data=f"userinfo_page_{page + 1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
        
    return InlineKeyboardMarkup(keyboard)

@admin_only
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    stats = db.get_bot_stats()
    stats_text = (f"üìä *Bot Statistics*\n\n"
                  f"üë• *Total Users:* {stats['total_users']}\n"
                  f"üì® *Total Messages (pairs):* {stats['total_messages']}\n"
                  f"üìà *Messages Today:* {stats['today_messages']}\n"
                  f"üèÉ *Active Users Today:* {stats['today_active_users']}")
    await update.message.reply_text(stats_text, parse_mode='Markdown')

@admin_only
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await update.message.reply_text("‚úÖ Pong! I'm alive and ready to serve.")

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: user_info —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ >>>
@admin_only
async def user_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Shows a paginated list of users to select from for getting info."""
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ —Å—Ä–∞–∑—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if context.args:
        try:
            user_id = int(context.args[0])
            await show_user_info_details(update, context, user_id)
            return
        except (ValueError, IndexError):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
            return

    # –ï—Å–ª–∏ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await update.message.reply_text(
        "üë§ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*",
        reply_markup=create_user_selection_keyboard(page=0),
        parse_mode=ParseMode.MARKDOWN
    )

# <<< –ù–û–í–û–ï: –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π >>>
async def show_user_info_details(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """Fetches and displays detailed information for a given user_id."""
    try:
        settings = db.get_user_settings(user_id, DEFAULT_MODEL, "")
        if not settings.get('language'): 
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î."); return
        
        history = db.get_user_history(user_id, limit=3)
        ban_status = "‚ùå –ó–∞–±–∞–Ω–µ–Ω" if settings.get('is_banned') else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        info_text = (f"üë§ *–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}*\n\n*–°—Ç–∞—Ç—É—Å:* {ban_status}\n*–ò–º—è:* {settings.get('first_name')}\n"
                     f"*–Æ–∑–µ—Ä–Ω–µ–π–º:* @{settings.get('username')}\n*–Ø–∑—ã–∫:* {settings.get('language')}\n"
                     f"*–ú–æ–¥–µ–ª—å:* `{settings['model']}`\n*–ü–∞–º—è—Ç—å:* {'–í–∫–ª' if settings['memory_enabled'] else '–í—ã–∫–ª'}\n"
                     f"*–†–æ–ª—å:* `{settings['system_prompt'][:100]}...`\n\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è:*")
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ. –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–æ–π - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º.
        if isinstance(update, Update) and update.message:
            await update.message.reply_text(info_text, parse_mode='Markdown')
        else: # update is actually a CallbackQuery
            await update.edit_message_text(info_text, parse_mode='Markdown')

        if history:
            for pair in history: 
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
                if isinstance(update, Update) and update.message:
                    await update.message.reply_text(f"*{'–Æ–∑–µ—Ä'}:* {pair['user_message_text']}\n*{'–ë–æ—Ç'}:* {pair['bot_response_text']}", parse_mode='Markdown')
                else: # query.message
                    await update.message.reply_text(f"*{'–Æ–∑–µ—Ä'}:* {pair['user_message_text']}\n*{'–ë–æ—Ç'}:* {pair['bot_response_text']}", parse_mode='Markdown')
        else:
            if isinstance(update, Update) and update.message:
                await update.message.reply_text("_–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞._")
            else:
                await update.message.reply_text("_–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞._")
    except Exception as e:
        error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ: {e}"
        if isinstance(update, Update) and update.message:
            await update.message.reply_text(error_message)
        else:
            await update.edit_message_text(error_message)


@admin_only
async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

@admin_only
async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

@admin_only
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass